{"version":3,"sources":["components/Header.jsx","components/Banner.jsx","components/NewTweetForm.jsx","util/date.js","components/Avatar.jsx","components/EditTweetForm.jsx","components/TweetCard.jsx","pages/Login.jsx","context/AuthContext.jsx","components/Tweets.jsx","pages/AllTweets.jsx","pages/MyTweets.jsx","App.jsx","service/auth.js","service/tweet.js","db/token.js","index.js","network/http.js"],"names":["Header","memo","username","onLogout","onMyTweets","onAllTweets","className","src","alt","onClick","Banner","text","isAlert","NewTweetForm","tweetService","onError","onCreated","useState","tweet","setTweet","onSubmit","event","preventDefault","postTweet","then","created","catch","type","placeholder","value","required","autoFocus","onChange","target","parseDate","tdate","Date","parse","now","diff","Math","floor","round","month","toLocaleDateString","getDate","Avatar","url","name","charAt","EditTweetForm","onUpdate","onClose","setText","id","TweetCard","owner","onDelete","onUsernameClick","createdAt","editing","setEditing","Login","onSignUp","onLogin","signup","setSignup","setUsername","password","setPassword","setName","email","setEmail","setURL","setIsAlert","setError","error","toString","checked","htmlFor","AuthContext","createContext","contextRef","createRef","AuthProvider","authService","authErrorEventBus","children","undefined","user","setUser","useImperativeHandle","token","useEffect","listen","err","console","log","me","signUp","useCallback","logIn","login","logout","a","context","useMemo","Provider","AuthErrorEventBus","callback","this","useAuth","useContext","Tweets","addable","tweets","setTweets","history","useHistory","getTweets","tweetId","deleteTweet","filter","updateTweet","updated","map","item","push","setTimeout","transient","length","AllTweets","MyTweets","useParams","App","window","confirm","exact","path","AuthService","http","tokenStorage","fetch","method","body","JSON","stringify","data","setToken","getToken","headers","Authorization","clearToken","TweetService","query","getHeaders","header","TOKEN","TokenStorage","localStorage","setItem","getItem","clear","httpClient","baseURL","options","res","json","status","message","Error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2cf4b82.chunk.js","sourcesContent":["import React, { memo } from 'react';\n\nconst Header = memo(({ username, onLogout, onMyTweets, onAllTweets }) => {\n  return (\n    <header className='header'>\n      <div className='logo'>\n        <img src='./img/logo.png' alt='Dwitter Logo' className='logo-img' />\n        <h1 className='logo-name'>Dwitter</h1>\n        {username && <span className='logo-user'>@{username}</span>}\n      </div>\n      {username && (\n        <nav className='menu'>\n          <button onClick={onAllTweets}>All Tweets</button>\n          <button onClick={onMyTweets}>My Tweets</button>\n          <button className='menu-item' onClick={onLogout}>\n            Logout\n          </button>\n        </nav>\n      )}\n    </header>\n  );\n});\n\nexport default Header;\n","import React, { memo } from 'react';\n\nconst Banner = memo(({ text, isAlert }) => (\n  <>\n    {text && (\n      <p className={`banner ${isAlert ? 'banner-red' : 'banner-green'}`}>\n        {text}\n      </p>\n    )}\n  </>\n));\nexport default Banner;\n","import React, { useState } from 'react';\n\nconst NewTweetForm = ({ tweetService, onError, onCreated }) => {\n  const [tweet, setTweet] = useState('');\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    tweetService\n      .postTweet(tweet)\n      .then((created) => {\n        setTweet('');\n        onCreated(created);\n      })\n      .catch(onError);\n  };\n\n  const onChange = (event) => {\n    setTweet(event.target.value);\n  };\n\n  return (\n    <form className='tweet-form' onSubmit={onSubmit}>\n      <input\n        type='text'\n        placeholder='Edit your tweet'\n        value={tweet}\n        required\n        autoFocus\n        onChange={onChange}\n        className='form-input tweet-input'\n      />\n      <button type='submit' className='form-btn'>\n        Post\n      </button>\n    </form>\n  );\n};\n\nexport default NewTweetForm;\n","export default function parseDate(tdate) {\n  const created = new Date(Date.parse(tdate));\n  const now = new Date();\n  const diff = Math.floor((now - created) / 1000);\n  if (diff <= 1) {\n    return 'just now';\n  }\n  if (diff < 20) {\n    return diff + ' seconds ago';\n  }\n  if (diff < 40) {\n    return 'half a minute ago';\n  }\n  if (diff < 60) {\n    return 'less than a minute ago';\n  }\n  if (diff <= 90) {\n    return 'one minute ago';\n  }\n  if (diff <= 3540) {\n    return Math.round(diff / 60) + ' minutes ago';\n  }\n  if (diff <= 5400) {\n    return '1 hour ago';\n  }\n  if (diff <= 86400) {\n    return Math.round(diff / 3600) + ' hours ago';\n  }\n  if (diff <= 129600) {\n    return '1 day ago';\n  }\n  if (diff < 604800) {\n    return Math.round(diff / 86400) + ' days ago';\n  }\n  if (diff <= 777600) {\n    return '1 week ago';\n  }\n  const month = created.toLocaleDateString('default', { month: 'long' });\n  return `on ${month} ${created.getDate()}`;\n}\n","import React, { memo } from 'react';\n\nconst Avatar = memo(({ url, name }) => (\n  <div>\n    {!!url ? (\n      <img src={url} alt='avatar' className='avatar-img' />\n    ) : (\n      <div className='avatar-txt'>{name.charAt(0)}</div>\n    )}\n  </div>\n));\n\nexport default Avatar;\n","import React, { useState } from 'react';\n\nconst EditTweetForm = ({ tweet, onUpdate, onClose }) => {\n  const [text, setText] = useState(tweet.text);\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    onUpdate(tweet.id, text);\n    onClose();\n  };\n\n  const onChange = (event) => {\n    setText(event.target.value);\n  };\n\n  return (\n    <form className='edit-tweet-form' onSubmit={onSubmit}>\n      <input\n        type='text'\n        placeholder='Edit your tweet'\n        value={text}\n        required\n        autoFocus\n        onChange={onChange}\n        className='form-input tweet-input'\n      />\n      <div className='edit-tweet-form-action'>\n        <button type='submit' className='form-btn-update'>\n          Update\n        </button>\n        <button type='button' className='form-btn-cancel' onClick={onClose}>\n          Cancel\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default EditTweetForm;\n","import React, { memo, useState } from 'react';\nimport parseDate from '../util/date';\nimport Avatar from './Avatar';\nimport EditTweetForm from './EditTweetForm';\n\nconst TweetCard = memo(\n  ({ tweet, owner, onDelete, onUpdate, onUsernameClick }) => {\n    const { id, username, name, url, text, createdAt } = tweet;\n    const [editing, setEditing] = useState(false);\n    const onClose = () => setEditing(false);\n\n    return (\n      <li className='tweet'>\n        <section className='tweet-container'>\n          <Avatar url={url} name={name} />\n          <div className='tweet-body'>\n            <span className='tweet-name'>{name}</span>\n            <span\n              className='tweet-username'\n              onClick={() => onUsernameClick(tweet)}\n            >\n              @{username}\n            </span>\n            <span className='tweet-date'> · {parseDate(createdAt)}</span>\n            <p>{text}</p>\n            {editing && (\n              <EditTweetForm\n                tweet={tweet}\n                onUpdate={onUpdate}\n                onClose={onClose}\n              />\n            )}\n          </div>\n        </section>\n        {owner && (\n          <div className='tweet-action'>\n            <button className='tweet-action-btn' onClick={() => onDelete(id)}>\n              x\n            </button>\n            <button\n              className='tweet-action-btn'\n              onClick={() => setEditing(true)}\n            >\n              ✎\n            </button>\n          </div>\n        )}\n      </li>\n    );\n  }\n);\nexport default TweetCard;\n","import React, { useState } from 'react';\nimport Banner from '../components/Banner';\n\nconst Login = ({ onSignUp, onLogin }) => {\n  const [signup, setSignup] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [url, setURL] = useState('');\n  const [text, setText] = useState('');\n  const [isAlert, setIsAlert] = useState(false);\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    if (signup) {\n      onSignUp(username, password, name, email, url).catch(setError);\n    } else {\n      onLogin(username, password).catch(setError);\n    }\n  };\n\n  const setError = (error) => {\n    setText(error.toString());\n    setIsAlert(true);\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { name, value, checked },\n    } = event;\n    switch (name) {\n      case 'username':\n        return setUsername(value);\n      case 'password':\n        return setPassword(value);\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'url':\n        return setURL(value);\n      case 'signup':\n        return setSignup(checked);\n      default:\n    }\n  };\n\n  return (\n    <>\n      <Banner text={text} isAlert={isAlert} />\n      <form className='auth-form' onSubmit={onSubmit}>\n        <input\n          name='username'\n          type='text'\n          placeholder='Id'\n          value={username}\n          onChange={onChange}\n          className='form-input'\n          required\n        />\n        <input\n          name='password'\n          type='password'\n          placeholder='Password'\n          value={password}\n          className='form-input'\n          onChange={onChange}\n        />\n        {signup && (\n          <input\n            name='name'\n            type='text'\n            placeholder='Name'\n            value={name}\n            onChange={onChange}\n            className='form-input'\n            required\n          />\n        )}\n        {signup && (\n          <input\n            name='email'\n            type='email'\n            placeholder='Email'\n            value={email}\n            onChange={onChange}\n            className='form-input'\n            required\n          />\n        )}\n        {signup && (\n          <input\n            name='url'\n            type='url'\n            placeholder='Profile Image URL'\n            value={url}\n            onChange={onChange}\n            className='form-input'\n          />\n        )}\n        <div className='form-signup'>\n          <input\n            name='signup'\n            id='signup'\n            type='checkbox'\n            onChange={onChange}\n            checked={signup}\n          />\n          <label htmlFor='signup'> Create a new account?</label>\n        </div>\n        <button className='form-btn auth-form-btn' type='submit'>\n          {signup ? 'Sign Up' : 'Sign In'}\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default Login;\n","import {\n  createContext,\n  createRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useState,\n} from 'react';\nimport Header from '../components/Header';\nimport Login from '../pages/Login';\n\nconst AuthContext = createContext({});\n\nconst contextRef = createRef();\n\nexport function AuthProvider({ authService, authErrorEventBus, children }) {\n  const [user, setUser] = useState(undefined);\n\n  useImperativeHandle(contextRef, () => (user ? user.token : undefined));\n\n  useEffect(() => {\n    authErrorEventBus.listen((err) => {\n      console.log(err);\n      setUser(undefined);\n    });\n  }, [authErrorEventBus]);\n\n  useEffect(() => {\n    authService.me().then(setUser).catch(console.error);\n  }, [authService]);\n\n  const signUp = useCallback(\n    async (username, password, name, email, url) =>\n      authService\n        .signup(username, password, name, email, url)\n        .then((user) => setUser(user)),\n    [authService]\n  );\n\n  const logIn = useCallback(\n    async (username, password) =>\n      authService.login(username, password).then((user) => setUser(user)),\n    [authService]\n  );\n\n  const logout = useCallback(\n    async () => authService.logout().then(() => setUser(undefined)),\n    [authService]\n  );\n\n  const context = useMemo(\n    () => ({\n      user,\n      signUp,\n      logIn,\n      logout,\n    }),\n    [user, signUp, logIn, logout]\n  );\n\n  return (\n    <AuthContext.Provider value={context}>\n      {user ? (\n        children\n      ) : (\n        <div className='app'>\n          <Header />\n          <Login onSignUp={signUp} onLogin={logIn} />\n        </div>\n      )}\n    </AuthContext.Provider>\n  );\n}\n\nexport class AuthErrorEventBus {\n  listen(callback) {\n    this.callback = callback;\n  }\n  notify(error) {\n    this.callback(error);\n  }\n}\n\nexport default AuthContext;\nexport const fetchToken = () => contextRef.current;\nexport const useAuth = () => useContext(AuthContext);\n","import React, { memo, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Banner from './Banner';\nimport NewTweetForm from './NewTweetForm';\nimport TweetCard from './TweetCard';\nimport { useAuth } from '../context/AuthContext';\n\nconst Tweets = memo(({ tweetService, username, addable }) => {\n  const [tweets, setTweets] = useState([]);\n  const [error, setError] = useState('');\n  const history = useHistory();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    tweetService\n      .getTweets(username)\n      .then((tweets) => setTweets([...tweets]))\n      .catch(onError);\n  }, [tweetService, username, user]);\n\n  const onCreated = (tweet) => {\n    setTweets((tweets) => [tweet, ...tweets]);\n  };\n\n  const onDelete = (tweetId) =>\n    tweetService\n      .deleteTweet(tweetId)\n      .then(() =>\n        setTweets((tweets) => tweets.filter((tweet) => tweet.id !== tweetId))\n      )\n      .catch((error) => setError(error.toString()));\n\n  const onUpdate = (tweetId, text) =>\n    tweetService\n      .updateTweet(tweetId, text)\n      .then((updated) =>\n        setTweets((tweets) =>\n          tweets.map((item) => (item.id === updated.id ? updated : item))\n        )\n      )\n      .catch((error) => error.toString());\n\n  const onUsernameClick = (tweet) => history.push(`/${tweet.username}`);\n\n  const onError = (error) => {\n    setError(error.toString());\n    setTimeout(() => {\n      setError('');\n    }, 3000);\n  };\n\n  return (\n    <>\n      {addable && (\n        <NewTweetForm\n          tweetService={tweetService}\n          onError={onError}\n          onCreated={onCreated}\n        />\n      )}\n      {error && <Banner text={error} isAlert={true} transient={true} />}\n      {tweets.length === 0 && <p className='tweets-empty'>No Tweets Yet</p>}\n      <ul className='tweets'>\n        {tweets.map((tweet) => (\n          <TweetCard\n            key={tweet.id}\n            tweet={tweet}\n            owner={tweet.username === user.username}\n            onDelete={onDelete}\n            onUpdate={onUpdate}\n            onUsernameClick={onUsernameClick}\n          />\n        ))}\n      </ul>\n    </>\n  );\n});\nexport default Tweets;\n","import React from 'react';\nimport Tweets from '../components/Tweets';\n\nconst AllTweets = ({ tweetService }) => (\n  <Tweets tweetService={tweetService} addable={true} />\n);\n\nexport default AllTweets;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport Tweets from '../components/Tweets';\n\nconst MyTweets = ({ tweetService }) => {\n  const { username } = useParams();\n  return (\n    <Tweets tweetService={tweetService} username={username} addable={false} />\n  );\n};\n\nexport default MyTweets;\n","import { Switch, Route, useHistory } from 'react-router-dom';\nimport Header from './components/Header';\nimport AllTweets from './pages/AllTweets';\nimport MyTweets from './pages/MyTweets';\nimport { useAuth } from './context/AuthContext';\n\nfunction App({ tweetService }) {\n  const history = useHistory();\n  const { user, logout } = useAuth();\n\n  const onAllTweets = () => {\n    history.push('/');\n  };\n\n  const onMyTweets = () => {\n    history.push(`/${user.username}`);\n  };\n\n  const onLogout = () => {\n    if (window.confirm('Do you want to log out?')) {\n      logout();\n      history.push('/');\n    }\n  };\n\n  return (\n    <div className='app'>\n      <Header\n        username={user.username}\n        onLogout={onLogout}\n        onAllTweets={onAllTweets}\n        onMyTweets={onMyTweets}\n      />\n      <Switch>\n        (\n        <>\n          <Route exact path='/'>\n            <AllTweets tweetService={tweetService} />\n          </Route>\n          <Route exact path='/:username'>\n            <MyTweets tweetService={tweetService} />\n          </Route>\n        </>\n        )\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","export default class AuthService {\n\n  constructor(http, tokenStorage) {\n    this.http = http;\n    this.tokenStorage = tokenStorage;\n  }\n\n  async signup(username, password, name, email, url) {\n    const data =  await this.http.fetch(`/auth/signup`, {\n      method: 'POST',\n      body: JSON.stringify({ username, password, name, email, url })\n    })\n    this.tokenStorage.setToken(data.token)\n    return data\n  }\n\n  async login(username, password) {\n    const data =  await this.http.fetch(`/auth/login`, {\n      method: 'POST',\n      body: JSON.stringify({ username, password })\n    })\n    this.tokenStorage.setToken(data.token)\n    return data\n  }\n\n  async me() {\n    const token = this.tokenStorage.getToken();\n    return await this.http.fetch('/auth/me', {\n      method: 'GET',\n      headers: {Authorization: `Bearer ${token}` }\n    });\n\n  }\n\n  async logout() {\n    this.tokenStorage.clearToken();\n    return;\n  }\n\n}","export default class TweetService {\n\n  constructor(http, tokenStorage) {\n    this.http = http;\n    this.tokenStorage = tokenStorage\n  }\n\n  async getTweets(username) {\n    const query = username ? `?username=${username}` : '';\n    const data = this.http.fetch(`/tweets${query}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n    console.log(\"---------------- getTweet Data: \", data)\n    return data\n  }\n\n  async postTweet(text) {\n    return await this.http.fetch(`/tweets`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({ text, username: 'ellie', name: 'Ellie' })\n    })\n  }\n\n  async deleteTweet(tweetId) {\n    return await this.http.fetch(`/tweets/${tweetId}`, {\n      method: 'DELETE',\n      headers: this.getHeaders()\n    })\n  }\n\n  async updateTweet(tweetId, text) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: 'PUT',\n      header: this.getHeaders(),\n      body: JSON.stringify({ text })\n    })\n  }\n\n  getHeaders() {\n    const token = this.tokenStorage.getToken();\n    return {\n      Authorization: `Bearer ${token}`\n    }\n  }\n}\n","const TOKEN = 'token';\n\nexport default class TokenStorage {\n  setToken(token) {\n    localStorage.setItem(TOKEN, token)\n  }\n\n  getToken() {\n    return localStorage.getItem(TOKEN);\n  }\n\n  clearToken() {\n    localStorage.clear(TOKEN)\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AuthService from './service/auth';\nimport TweetService from './service/tweet';\nimport { BrowserRouter } from 'react-router-dom';\nimport { AuthProvider } from './context/AuthContext';\nimport { AuthErrorEventBus } from './context/AuthContext';\nimport TokenStorage from './db/token';\nimport HttpClient from './network/http';\n\n// const baseURL = process.env.REACT_APP_BASE_URL;\nconst httpClient = new HttpClient();\nconst tokenStorage = new TokenStorage();\nconst authErrorEventBus = new AuthErrorEventBus();\nconst authService = new AuthService(httpClient, tokenStorage);\nconst tweetService = new TweetService(httpClient, tokenStorage);\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <AuthProvider\n        authService={authService}\n        authErrorEventBus={authErrorEventBus}\n      >\n        <App tweetService={tweetService} />\n      </AuthProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","export default class HttpClient {\n  constructor() {\n    this.baseURL = 'http://localhost:8080'\n  }\n\n  async fetch(url, options) {\n    const res = await fetch(`${this.baseURL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    });\n    let data;\n    try {\n      data = await res.json();\n    } catch (error) {\n      console.error(error);\n    }\n\n    if(res.status >299 || res.status < 200) {\n      const message =\n        data && data.message ? data.message : 'Something went wrong!';\n          throw new Error(message)\n    }\n    return data;\n  }\n}"],"sourceRoot":""}